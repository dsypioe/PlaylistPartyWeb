1.
http://www.playlistparty.live/api/auth.php:
//this retreives the access token for the sites spotify account (username: 314tn8lrwdckwt5nj3i214u2b), which is needed to do anything on sites spotify account
//client side (create playlist, add songs to playlist, remove songs from playlist, etc..)
Send: GET request, header: "Content-type", "application/json", no body information
Receive: JSON object that contains access token for 314tn8lrwdckwt5nj3i214u2b (sites spotify acount), example:
{"AQDav4JRFtK3mepZWNizXJcwINeMh0QroYAjq0ythB1kbArnA0sTeqq_AUqTbKZ75U27_6J7RNe4mdnq2NymCDwmTP"}

2.
http://www.playlistparty.live/api/createRoom.php:
//this creates a room on the databse, and holds the playlistid received by spotify from creation of playlist and
//the joincode for joining the room 
Send: POST request, header: "Content-type", "application/json", body: {"playlistid":"insert playlist id here", "joincode":"insert join code here", "playlistname":"playlist name here"}
Receive: JSON object that contains the roomid, example: {"id":"4"}

3.
http://www.playlistparty.live/api/joinRoom.php:
//this is what verifies a user joining a room. joincode is the string generated by our app that is essentially the room password
Send: POST request, header: "Content-type", "application/json", body: {"joincode":"insert join code here"}
Receive: JSON object that contains the roomid and playlistid, example: {"id":"4", "playlistid":"fn45njik", "playlistname":"playlist name here"}

4.
http://www.playlistparty.live/api/addtoBlacklist.php:
//this adds a song to the blacklist when it is removed from the playlist. roomid is the auto incremented id that is received when the host creates
//a room or someone joins the room
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"insert room id here", "songid":"insert spotify song id here"}
Receive: a JSON object with a status feild of 200 upon success or an error. examples:
{"error":"whatever error is"} //error
{"status":"200"} //song added to blacklist

5.
http://www.playlistparty.live/api/checkBlacklist.php:
//this checks the blacklist table to see if the song in question has been blacklisted from the room.
//roomid is the auto incremented id that is received when the host creates a room or someone joins the room
//songid is the spotify id of the song
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"insert room id here", "songid":"insert spotify song id here"}
Receive: a JSON object with a status feild of 200 if song is not blacklisted, or status feild of 400 if it is. examples:
{"status":"400"} //song is blacklisted
{"status":"200"} //song is not blacklisted

6.
http://www.playlistparty.live/api/addtoPlaylist.php:
//this stores song info for playlist in our data table. this may not be entirely necessary if it is easier to just get info directly from spotify.
//however, it may nice to have for the purpose of checking duplicates and populating client side room playlist table
//roomid is the same thing as it has been, songname is the name of the song, songid is the spotify id of the song, artist is the artist name for song
//and artlink is the link to the album art picture on spotify
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"insert room id here", "songid":"insert spotify song id here", "songname":"insert songname here", "artist":"artist name here", "artlink":"link to album art here"}
Receive: JSON object with status feild of 200 on success, or error with whatever the error is. examples:
{"status":"200"} //song added to playlist table
{"error":"whatver error is"} //song not added to table

7.
http://www.playlistparty.live/api/checkduplicatePlaylist.php:
//this checks if the song in question is already in playlist
//roomid is the same thing it has been, songid is same thing it has been
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"roomid here","songid":"songid here"}
Receive: JSON object with status feild 200 if song is not in playlist, and 400 if it is. examples:
{"status":"200"} //song is not in playlist
{"status":"400"} //song is in playlist

8.
http://www.playlistparty.live/api/getplaylistInfo.php:
//this just fetches the playlist info from our table rather that spotify. if it is easier to just use everything from spotify, do that instead
//roomid is the same thing it has been
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"roomid here"}
Receive: array of JSON objects called item, with sub-objects songname(name of song), songid(spotify song id), artist(song artist), artlink (link to album art).
examples:
{"error":"error message"} //does not retreive playlist info
{
   item:[
      {
	"songname":"name of song",
	"songid":"spotify song id",
	"artist":"name of artist",
	"artlink":"link to album art"
      },
      {
	~same info as above~
      }
   ]
}

9.
http://www.playlistparty.live/api/removefromPlaylist.php:
//this removes a song from the playlist table. takes in roomid and songid
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"roomid here", "songid":"songid here"}
Receive: JSON object status with value 200 if song is removed, or error with the error message examples:
{"status":"200"}//song has been removed from playlist
{"error":"error message here"}//error removing song from playlist table

10.
http://www.playlistparty.live/api/checkduplicateJoincode.php:
//this checks if the generated joincode has already been used. returns status of 200 if not, and status of 400 if it has
Send: POST request, header: "Content-type", "application/json", body: {"joincode":"generated joincode here"}
receive: JSON object with status of 200 if joincode is okay to use, or status of 400 if it has already been used. examples:
{"status":"200"} //generated joincode can be used
{"status":"400"} //generated joincode can not be used

11.
http://www.playlistparty.live/api/closeRoom.php:
//this removes all the room information from our database, deleting the room
Send: POST request, header: "Content-type", "application/json", body: {"roomid":"room id here"}
receive: JSON object with status of 200 if room has been deleted, or error message. examples:
{"status":"200"} //generated joincode can be used